# Updated for v8.0.0

# frozen_string_literal: true

# ============= #
#   Constants   #
# ============= #

IS_LOCAL = ENV['IS_LOCAL'] == 'true'
IS_DEBUGGING = false

# ======================= #
#   Convenience Methods   #
# ======================= #

def cheer(message)
  message "üëç #{message}"
end

def debug_message(message)
  message "[Debug] #{message}" if IS_DEBUGGING && IS_LOCAL
end

# ================== #
#   Test Reporting   #
# ================== #

# Run the Danger-JUnit plugin and print test report summary to PR
if defined?(junit)
  # We need to check on whether or not we can access the generated junit report
  if ENV.key?('DANGER_JUNIT_PATH')
    junit.parse ENV['DANGER_JUNIT_PATH']
    junit.report

    if junit.passes.count == junit.tests.count
      message "#{junit.tests.count} tests ran. All passed! üéâ"
    else
      message "#{junit.tests.count} tests ran. #{junit.passes.count} passed, #{junit.failures.count} failed."
    end

    # Set some environment variables for Fastlane to work with after Danger is finished running
    ENV['DANGER_JUNIT_TESTS_COUNT'] = junit.tests.count.to_s
    ENV['DANGER_JUNIT_PASSES_COUNT'] = junit.passes.count.to_s
    ENV['DANGER_JUNIT_FAILURES_COUNT'] = junit.failures.count.to_s
    ENV['DANGER_JUNIT_ERRORS_COUNT'] = junit.errors.count.to_s
    ENV['DANGER_JUNIT_SKIPPED_COUNT'] = junit.skipped.count.to_s
  else
    warn 'The danger-junit plugin was found, but no DANGER_JUNIT_PATH was set.'
  end
end

# We need a pat on the back sometimes!
message 'üëã üëã Great job!' if status_report[:errors].empty? && status_report[:warnings].empty?
